
from settings import *
from tile import Tile
from player import Player
from debug import debug
from support import *
from weapons import Weapon
import pygame
class Level:
    def __init__(self):

        # pobieranie płaszczyzny wyświetlania!
        self.display_surf = pygame.display.get_surface()
        # ustawienia grup obiektów :D
        self.visible_sprites = YSortCameraGroup()
        self.obstacle_sprites = pygame.sprite.Group()

        # ustawienia położenia obiektów :)
        self.create_map()

    def create_map(self):
        layouts = {
            'boundary': import_csv_layout('grafika/Mapa1_Granice.csv'),
            'niszczalne': import_csv_layout('grafika/Mapa1_Przeszkody.csv'),
            'object': import_csv_layout('grafika/Mapa1_Obiekty.csv'),
        }
        graphics = {
            'niszczalne': import_folder('grafika/Przeszkody'),
            'objects': import_folder('grafika/Obiekty')

        }

        for style, layout in layouts.items():
            for row_index, row in enumerate(layout):
                for col_index, col in enumerate(row):
                    if col != '-1':
                        x = col_index * TILESIZE
                        y = row_index * TILESIZE
                        if style == 'boundary':
                            Tile((x,y), [self.obstacle_sprites], 'invisible')

                        if style == 'object':
                            surf = graphics['objects'][int(col)]
                            Tile((x,y), [self.visible_sprites, self.obstacle_sprites], 'object', surf)

                        if style == 'niszczalne':
                            przeszkoda_image = pygame.image.load('grafika/Przeszkody/Przeszkoda1.png')
                            Tile((x,y), [self.visible_sprites, self.obstacle_sprites], 'niszczalne', przeszkoda_image)

                self.player = Player((400, 304), [self.visible_sprites], self.obstacle_sprites, self.create_attack)

    def create_attack(self):
        Weapon(self.player, [self.visible_sprites])
    def run(self):
        # ciągłe odświeżanie i rysowanie gry :D
        self.visible_sprites.custom_draw(self.player)
        self.visible_sprites.update()
        debug(self.player.rect.centery)
class YSortCameraGroup(pygame.sprite.Group):
    def __init__(self):

        # ogólne ustawienia:
        super().__init__()
        self.display_surf = pygame.display.get_surface()
        self.half_width = self.display_surf.get_size()[0]//2
        self.half_height = self.display_surf.get_size()[1]//2
        self.offset = pygame.math.Vector2()

    #     Tworzenie podłoża:
        self.floor_surf = pygame.image.load('grafika/ground.png').convert()
        self.floor_rect = self.floor_surf.get_rect(topleft = (0, 0))

    def custom_draw(self, player):

        # Przesunięcie :0
        self.offset.x = player.rect.centerx - self.half_width
        self.offset.y = player.rect.centery - self.half_height

        # Rysowanie podłoża:
        self.floor_offset_pos = self.floor_rect.topleft - self.offset
        self.display_surf.blit(self.floor_surf, self.floor_offset_pos)

        # for sprite in self.sprites():
        for sprite in sorted(self.sprites(), key = lambda sprite: sprite.rect.centery):
            offset_pos = sprite.rect.topleft - self.offset
            self.display_surf.blit(sprite.image, offset_pos)
